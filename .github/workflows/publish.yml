name: Publish
on:
  push:
    branches:
      - main

jobs:
  publish:
    strategy:
      matrix:
        packages:
          - { name: '@_janina/mdx', path: 'mdx', registry: 'https://registry.npmjs.org', scope: '@_janina', token_secret_name: 'NPM_TOKEN' }
          - { name: '@_janina/ui', path: 'lib', registry: 'https://registry.npmjs.org', scope: '@_janina', token_secret_name: 'NPM_TOKEN' }
    runs-on: ubuntu-latest
    permissions:
      contents: read # this is needed by version-metadata
      pull-requests: read # this is needed by version-metadata
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 8.5.1
      # Setup .npmrc file to publish to GitHub Packages
      - uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "pnpm"
          registry-url: ${{ matrix.packages.registry }}
          scope: ${{ matrix.packages.scope }}
      - id: version-metadata
        uses: Quantco/ui-actions/version-metadata@v1.0.7
        with:
          file: "${{ matrix.packages.path }}/package.json"
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Determine last published version
        id: last-published-version
        run: |
          set +e # disable pipefail, we handle errors and don't want to exit when one occurs
          version=$(npm show $PACKAGE version)
          if [ $? -eq 0 ]
          then
            echo "Last published version is $version"
            echo "CI_HASNT_PUBLISHED_YET=false" >> $GITHUB_ENV
            echo "CI_PUBLISHED_VERSION=$version" >> $GITHUB_ENV
          else
            echo "Determining last published version failed, falling back to 0.0.0"
            echo "This should only happen if the package has never been published before."
            echo "If it happens for any other reason you should investigate why it failed."
            echo "CI_HASNT_PUBLISHED_YET=true" >> $GITHUB_ENV
            echo "CI_PUBLISHED_VERSION=0.0.0" >> $GITHUB_ENV
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets[matrix.packages.token_secret_name] }}
          PACKAGE: ${{ matrix.packages.name }}
      - name: Determine if a new version should be published
        uses: Quantco/ui-actions/publish@v1.0.7
        id: publish
        with:
          increment-type: pre-release
          relevant-files: '[".github/**", "${{ matrix.packages.path }}/**", "LICENSE", "package.json", ".eslintrc.js", "pnpm-workspace.yaml"]'
          package-json-file-path: '${{ matrix.packages.path }}/package.json'
          latest-registry-version: ${{ env.CI_PUBLISHED_VERSION }}
          version-metadata-json: ${{ steps.version-metadata.outputs.json }}
      - run: pnpm install
      # github casts all outputs to strings, so evaluate against the string 'true' here :)
        if: steps.publish.outputs.publish == 'true'
      - run: 'pnpm --filter "${{ matrix.packages.name }}" build'
        if: steps.publish.outputs.publish == 'true'
      - name: Make preparations for publishing, e.g. copying the LICENSE file to the package directory
        run: 'pnpm --filter "${{ matrix.packages.name }}" ci:publish-preparations'
        if: steps.publish.outputs.publish == 'true'
      - name: publish npm package
        if: steps.publish.outputs.publish == 'true'
        working-directory: ${{ matrix.packages.path }}
        run: |
          echo "Publishing version ${{ steps.publish.outputs.version }}"
          npm version --git-tag-version false --allow-same-version true ${{ steps.publish.outputs.version }}
          # "--access public" is required for scoped packages when publishing for the first time
          # as by default scoped packages are set to private
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets[matrix.packages.token_secret_name] }}
      - name: Create action summary
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        env: # this is required because bash/sh and backticks don't play nice together
          SUMMARY: ${{ steps.publish.outputs.reason }}
